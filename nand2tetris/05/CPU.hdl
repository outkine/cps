// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM).

 The outM and writeM outputs are combinational:

 * they are affected instantaneously by the execution of the current
 * instruction.

 The addressM and pc outputs are clocked: although they

 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

 /* ixxaccccccdddjjj */

 /* i a c   d     j   */
 /* 0 3 4-9 10-12 13-15 */


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* a register */

    Not(in=instruction[15], out=isA);

    Or(a=isA, b=instruction[5], out=loadA);

    Mux16(sel=instruction[15], a=instruction, b=aluOut, out=AIn);

    ARegister(in=AIn, load=loadA, out=outA, out[0..14]=addressM);

    /* c instruction */
    And(a=instruction[4], b=instruction[15], out=loadD);

    DRegister(in=aluOut, load=loadD, out=outD);

    Mux16(sel=instruction[12], a=outA, b=inM, out=y);
    ALU(
        x=outD,
        y=y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f =instruction[7],
        no=instruction[6],

        out=aluOut,
        out=outM,
        ng=ng,
        zr=zr
    );

    /* 13 = less, 14 = eq, 15 = greater */
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    Or(a=ng, b=zr, out=notgt);
    Not(in=notgt, out=gt);
    And(a=gt, b=instruction[0], out=j3);
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j);
    Not(in=j, out=inc);

    And(a=j, b=instruction[15], out=realJ);
    Or(a=inc, b=isA, out=realInc);

    PC(inc=realInc, reset=reset, in=outA, load=realJ, out[0..14]=pc);


    And(a=instruction[3], b=instruction[15], out=writeM);

    /* so messy! :P */
}
